= Classes =
{{file:images/haskell_classes.png}}

== Eq ==

{{{class="haskell"
class Eq a where
    (==), (/=) :: a -> a -> Bool
    
    x /= y = not (x == y)
    x == y = not (x /= y)
}}}

All basic datatypes except for functions and IO.

== Ord ==

{{{class="haskell"
class (Eq a) => Ord a where
    compare                 :: a -> a -> Ordering
    (<), (<=), (>=), (>)    :: a -> a -> Bool
    max, min                :: a -> a -> a
    
    compare x y | x == y    = EQ
                | x <= y    = LT
                | otherwise = GT
                
    x <= y  = compare x y   /= GT
    x < y   = compare x y   == LT
    x >= y  = compare x y   /= LT
    x > y   = compare x y   == GT
    
    -- Note that (min x y, max x xy = (x, y) or (y, x)
    max x y | x <= y    = y
            | otherwise = x
    min x y | x <= y    = x
            | otherwise = y
}}}

All basic datatypes except for functions, IO and IOError


